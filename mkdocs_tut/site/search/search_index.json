{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"NOTE: Please email me at abhishek56987@gmail.com for content suggestion and error fixes! Welcome to Python Handbook Preface Over the past 3 years of my Python experience, I came to realize that after the beginner stage of learning and somehow missing the flow make you revisit the learning sources to keep up. But, Almost all learning sources are made with keeping in mind that the source can be browsed by a very beginner. So, you have to deal with the ground steps and a lot of unnecessary text to reach up to your current stage. Enters Python Handbook into the picture. Here we have skipped all the extra reading text and present to you the only essential components with direct brief information/description and demo example. So, you can pace your understanding and come back any time to refresh a specific topic or just a single liner. Author I am Abhishek Pathak , a big python enthusiast with Bachelor of Technology degree in Computer Science. I'm currently employed in Samsung Research Institute as a Software Engineer for more than one year. I love teaching and making contents easily understandable to others by converting it into a storyline with my creativity.","title":"Home"},{"location":"#welcome-to-python-handbook","text":"","title":"Welcome to Python Handbook"},{"location":"#preface","text":"Over the past 3 years of my Python experience, I came to realize that after the beginner stage of learning and somehow missing the flow make you revisit the learning sources to keep up. But, Almost all learning sources are made with keeping in mind that the source can be browsed by a very beginner. So, you have to deal with the ground steps and a lot of unnecessary text to reach up to your current stage. Enters Python Handbook into the picture. Here we have skipped all the extra reading text and present to you the only essential components with direct brief information/description and demo example. So, you can pace your understanding and come back any time to refresh a specific topic or just a single liner.","title":"Preface"},{"location":"#author","text":"I am Abhishek Pathak , a big python enthusiast with Bachelor of Technology degree in Computer Science. I'm currently employed in Samsung Research Institute as a Software Engineer for more than one year. I love teaching and making contents easily understandable to others by converting it into a storyline with my creativity.","title":"Author"},{"location":"about/","text":"References https://www.mkdocs.org/","title":"About"},{"location":"about/#references","text":"https://www.mkdocs.org/","title":"References"},{"location":"py_basics/","text":"Python Basics Common Methods and Description .tg {border-collapse:collapse;border-spacing:0;} .tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;} .tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;} .tg .tg-34fe{background-color:#c0c0c0;border-color:inherit;text-align:center;vertical-align:top} .tg .tg-zlqz{font-weight:bold;background-color:#c0c0c0;border-color:inherit;text-align:center;vertical-align:top} .tg .tg-5nj1{font-family:\"Lucida Console\", Monaco, monospace !important;;border-color:inherit;text-align:left;vertical-align:top} .tg .tg-0pky{border-color:inherit;text-align:left;vertical-align:top} Method Description type(obj) Returns class type of argument id(obj) Retuens unique id associated with object dir(class / module) Returns all methods available sys.path List of locations where python looks for modules to import abc.__doc__ Print class or method documentation def function(): \"\"\"documentation\"\"\" Documentation about method to show in __doc__ method map(lambda t: t*2, mylist) Map each item of mylist to lambda function FALSE, None, 0, \" \", ( ), [ ], { } All evelutes to false len(iterable) Returns length of iterable object def function(*args, **kwargs): print(args) print(kwargs) function('math', 'art', name='dev', age=20) args = positional arguments => ('math', 'art') kwargs = keyword arguments => {'name': 'dev', 'age': 20} python -m http.server # localhost:8000 python -m http.server 7800 # localhost:7800 Run a local test server python -m pydoc -p 1234 # localhost:1234 Open python documentation on local server import timeit timeit.timeit(my_func()) Measure execution time __bool__(): return False __len__(): return 0 Only cases when object is considered false if its defines any of these methods, else its always considered true Duck Typing Duck typing is a concept that says that the \u201ctype\u201d of the object is a matter of concern only at runtime and you don\u2019t need to to explicitly mention the type of the object before you perform any kind of operation on that object. The following example can help in understanding this concept - def calc(a,b): return a+b Now, Python says that for the above function I don\u2019t need to be concerned about the \u201ctype\u201d of the objects \u2018a\u2019 & \u2018b\u2019 and that the type will be taken care of during runtime as long as the objects support the \u2018+\u2019 . So, keeping this in mind the above function will work for any \u201ctype\u201d of object which supports the operator + i.e. it will return valid values for a string, list or Integer.","title":"Python Basics"},{"location":"py_basics/#python-basics","text":"","title":"Python Basics"},{"location":"py_basics/#common-methods-and-description","text":".tg {border-collapse:collapse;border-spacing:0;} .tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;} .tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;} .tg .tg-34fe{background-color:#c0c0c0;border-color:inherit;text-align:center;vertical-align:top} .tg .tg-zlqz{font-weight:bold;background-color:#c0c0c0;border-color:inherit;text-align:center;vertical-align:top} .tg .tg-5nj1{font-family:\"Lucida Console\", Monaco, monospace !important;;border-color:inherit;text-align:left;vertical-align:top} .tg .tg-0pky{border-color:inherit;text-align:left;vertical-align:top} Method Description type(obj) Returns class type of argument id(obj) Retuens unique id associated with object dir(class / module) Returns all methods available sys.path List of locations where python looks for modules to import abc.__doc__ Print class or method documentation def function(): \"\"\"documentation\"\"\" Documentation about method to show in __doc__ method map(lambda t: t*2, mylist) Map each item of mylist to lambda function FALSE, None, 0, \" \", ( ), [ ], { } All evelutes to false len(iterable) Returns length of iterable object def function(*args, **kwargs): print(args) print(kwargs) function('math', 'art', name='dev', age=20) args = positional arguments => ('math', 'art') kwargs = keyword arguments => {'name': 'dev', 'age': 20} python -m http.server # localhost:8000 python -m http.server 7800 # localhost:7800 Run a local test server python -m pydoc -p 1234 # localhost:1234 Open python documentation on local server import timeit timeit.timeit(my_func()) Measure execution time __bool__(): return False __len__(): return 0 Only cases when object is considered false if its defines any of these methods, else its always considered true","title":"Common Methods and Description"},{"location":"py_basics/#duck-typing","text":"Duck typing is a concept that says that the \u201ctype\u201d of the object is a matter of concern only at runtime and you don\u2019t need to to explicitly mention the type of the object before you perform any kind of operation on that object. The following example can help in understanding this concept - def calc(a,b): return a+b Now, Python says that for the above function I don\u2019t need to be concerned about the \u201ctype\u201d of the objects \u2018a\u2019 & \u2018b\u2019 and that the type will be taken care of during runtime as long as the objects support the \u2018+\u2019 . So, keeping this in mind the above function will work for any \u201ctype\u201d of object which supports the operator + i.e. it will return valid values for a string, list or Integer.","title":"Duck Typing"}]}